{"version":3,"sources":["components/Message/Message.module.scss","SlotMachine/SlotMachine.module.scss","reportWebVitals.ts","lib/scripts/utils.ts","hooks/useSlotMachine.ts","SlotMachine/media/strawberry.svg","SlotMachine/media/orange.svg","SlotMachine/media/banana.svg","SlotMachine/media/monkey.svg","components/Wheel/Wheel.tsx","components/Message/Message.tsx","components/Button/Button.tsx","SlotMachine/SlotMachine.tsx","index.tsx","components/Wheel/Wheel.module.scss","components/Button/Button.module.scss"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Logger","logs","this","args","newArgs","filePath","fileName","splice","push","type","date","Date","now","toISOString","log","console","error","logger","getRandom","Math","floor","random","getRandoms","getScore","valuesArr","map","Map","valuesLen","length","i","set","size","val","has","get","useSlotMachine","useState","indexes","setIndexes","status","setStatus","score","setScore","timerRef","useRef","intervalRef","stopSpinningHandler","useCallback","debug","current","clearInterval","clearTimeout","startSpinningHandler","setInterval","setTimeout","autoStartHandler","useEffect","wheels","Wheel","randomIndex","className","styleClasses","src","Strawberry","alt","Orange","Banana","Monkey","loserMessages","winnerMessages","full","consecutive","inconsecutive","Message","message","Button","title","severity","disabled","onClick","btnClasses","join","SlotMachine","currIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.378f11e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3IEB1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slot-machine\":\"SlotMachine_slot-machine__Wq61s\",\"slot-machine__header\":\"SlotMachine_slot-machine__header__2hlcO\",\"slot-machine__title\":\"SlotMachine_slot-machine__title__V5Lhi\",\"slot-machine__wheels-wrapper\":\"SlotMachine_slot-machine__wheels-wrapper__3F-vq\",\"slot-machine__btns-wrapper\":\"SlotMachine_slot-machine__btns-wrapper__1_Wgz\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","class Logger {\n    private logs: object[];\n\n    constructor() {\n        this.logs = [];\n    }\n\n    /**\n     * Runs only on development environment\n     * @returns {void}\n     */\n    debug(...args: any[]) {\n        if (process.env.NODE_ENV !== 'development') return;\n\n        // Convert arguments to cleaned array\n        const newArgs = [...args];\n\n        const filePath = newArgs[0];\n        // const fileName = filePath.replace(/^.*[\\\\/]/, '');\n        const fileName = filePath;\n\n        newArgs[0] = '%c' + fileName;\n        newArgs.splice(1, 0, 'color: #1c6ef7; font-weight: bold;');\n\n        this.logs.push({\n            type: 'DEBUG',\n            date: new Date(Date.now()).toISOString(),\n            log: newArgs\n        });\n\n        console.log(...newArgs);\n    }\n\n    /**\n     * Runs only on production environment\n     * @returns {void}\n     */\n    silly(...args: any[]) {\n        if (process.env.NODE_ENV !== 'production') return;\n\n        // Convert arguments to cleaned array\n        const newArgs = [...args];\n\n        const filePath = newArgs[0];\n        // const fileName = filePath.replace(/^.*[\\\\/]/, '');\n        const fileName = filePath;\n\n        newArgs[0] = '%c' + fileName;\n        newArgs.splice(1, 0, 'color: #1c6ef7; font-weight: bold;');\n\n        this.logs.push({\n            type: 'DEBUG',\n            date: new Date(Date.now()).toISOString(),\n            log: newArgs\n        });\n\n        console.log(...newArgs);\n    }\n\n    /**\n     * Runs anywhere\n     * @returns {void}\n     */\n    error(...args: any[]) {\n        // Convert arguments to cleaned array\n        const newArgs = [...args];\n\n        newArgs[0] = '%c' + newArgs[0];\n        newArgs.splice(1, 0, 'color: red; font-weight: bold;');\n\n        this.logs.push({\n            type: 'ERROR',\n            date: new Date(Date.now()).toISOString(),\n            log: newArgs\n        });\n\n        console.error(...newArgs);\n    }\n}\nexport const logger = new Logger();\n","import { useState, useCallback, useRef, useEffect } from 'react';\n\nimport { logger } from '../lib/scripts/utils';\n\nconst getRandom = () => Math.floor(Math.random() * 4);\nconst getRandoms = () => [getRandom(), getRandom(), getRandom()];\n\ntype scoreType = 'full' | 'consecutive' | 'inconsecutive' | '';\n\nexport const getScore = (valuesArr: number[]): scoreType => {\n    const map = new Map();\n    const valuesLen = valuesArr.length;\n\n    for (let i = 0; i < valuesLen; i += 1) {\n        map.set(valuesArr[i], i);\n    }\n\n    // no match\n    if (map.size === valuesLen) return '';\n\n    // full match\n    if (map.size === 1) return 'full';\n\n    // non-consecutive\n    // consecutive\n    for (let i = 0; i < valuesLen; i += 1) {\n        const val = valuesArr[i];\n\n        if (map.has(val) && map.get(val) === i) continue;\n\n        if (map.has(val) && map.get(val) === i + 1) {\n            return 'consecutive';\n        } else {\n            return 'inconsecutive';\n        }\n    }\n\n    return '';\n};\n\nconst useSlotMachine = () => {\n    const [indexes, setIndexes] = useState<number[]>(getRandoms());\n    const [status, setStatus] = useState<string>('');\n    const [score, setScore] = useState<scoreType>('');\n\n    const timerRef = useRef<NodeJS.Timeout>();\n    const intervalRef = useRef<NodeJS.Timeout>();\n\n    const stopSpinningHandler = useCallback(() => {\n        logger.debug('[useSlotMachine]', 'stopSpinningHandler');\n        logger.debug('👩 score is:', getScore(indexes) || 'no match');\n\n        setIndexes(indexes);\n        setStatus('spun');\n        setScore(getScore(indexes));\n\n        if (intervalRef.current) {\n            clearInterval(intervalRef.current);\n        }\n\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n        }\n    }, [indexes]);\n\n    const startSpinningHandler = useCallback(() => {\n        logger.debug('[useSlotMachine]', 'startSpinningHandler');\n\n        setScore('');\n        setStatus('spinning');\n\n        // clear auto start timer\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n        }\n\n        intervalRef.current = setInterval(() => {\n            setIndexes(getRandoms());\n        }, 50);\n\n        timerRef.current = setTimeout(() => {\n            stopSpinningHandler();\n        }, 10000);\n    }, [setIndexes, stopSpinningHandler, setStatus]);\n\n    const autoStartHandler = useCallback(() => {\n        logger.debug('[useSlotMachine]', 'autoStartHandler');\n\n        timerRef.current = setTimeout(() => {\n            startSpinningHandler();\n        }, 5000);\n    }, [startSpinningHandler]);\n\n    useEffect(() => {\n        if (status === '') {\n            autoStartHandler();\n        }\n    }, [status, autoStartHandler]);\n\n    return {\n        wheels: { indexes, status, score },\n        startSpinningHandler,\n        stopSpinningHandler\n    };\n};\n\nexport default useSlotMachine;\n","export default __webpack_public_path__ + \"static/media/strawberry.f0a9bcc8.svg\";","export default __webpack_public_path__ + \"static/media/orange.88099d7c.svg\";","export default __webpack_public_path__ + \"static/media/banana.9c06e5fb.svg\";","export default __webpack_public_path__ + \"static/media/monkey.ac9114bc.svg\";","import React from 'react';\n\nimport styleClasses from './Wheel.module.scss';\nimport Strawberry from '../../SlotMachine/media/strawberry.svg';\nimport Orange from '../../SlotMachine/media/orange.svg';\nimport Banana from '../../SlotMachine/media/banana.svg';\nimport Monkey from '../../SlotMachine/media/monkey.svg';\n\ntype WheelProps = {\n    randomIndex: number;\n};\n\nconst Wheel: React.FC<WheelProps> = ({ randomIndex }: WheelProps) => (\n    <div className={styleClasses['wheel']}>\n        <img src={Strawberry} className={randomIndex === 0 ? styleClasses['active'] : ''} alt='Strawberry' />\n        <img src={Orange} className={randomIndex === 1 ? styleClasses['active'] : ''} alt='Orange' />\n        <img src={Banana} className={randomIndex === 2 ? styleClasses['active'] : ''} alt='Banana' />\n        <img src={Monkey} className={randomIndex === 3 ? styleClasses['active'] : ''} alt='Monkey' />\n    </div>\n);\n\nexport default Wheel;\n","import React from 'react';\n\nimport styleClasses from './Message.module.scss';\n\ntype MessageProps = {\n    score: 'full' | 'consecutive' | 'inconsecutive' | '';\n};\n\nexport const loserMessages = [\n    'Not quite 😕'\n];\n\nexport const winnerMessages: { [type: string]: string } = {\n    full: 'You won $100 🎉',\n    consecutive: 'You won $20 🍻',\n    inconsecutive: 'You won $10 🍺'\n};\n\nconst Message: React.FC<MessageProps> = ({ score }: MessageProps) => {\n    let message;\n    if (typeof winnerMessages[score] !== 'undefined') {\n        message = winnerMessages[score];\n    } else {\n        message = loserMessages + ' ';\n    }\n\n    return <p className={styleClasses['message']}>{message}</p>;\n};\n\nexport default Message;\n","import React from 'react';\n\nimport styleClasses from './Button.module.scss';\n\ntype ButtonProps = {\n    title: string;\n    severity?: 'primary' | 'none';\n    disabled?: boolean;\n    onClick: () => void;\n};\n\nconst Button: React.FC<ButtonProps> = ({ title, severity, disabled, onClick }: ButtonProps) => {\n    if (!(title && onClick)) return null;\n\n    if (!disabled) {\n        disabled = false;\n    }\n\n    let btnClasses = [styleClasses['button']];\n    if (!severity) {\n        btnClasses.push(styleClasses['button--primary']);\n    } else if (severity === 'none') {\n        btnClasses.push(styleClasses['button--none']);\n    }\n\n    return (\n        <button className={btnClasses.join(' ')} type='button' disabled={disabled} onClick={onClick}>\n            {title}\n        </button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport useSlotMachine from '../hooks/useSlotMachine';\nimport Wheel from '../components/Wheel';\nimport Message from '../components/Message';\nimport Button from '../components/Button';\nimport styleClasses from './SlotMachine.module.scss';\n\nconst SlotMachine: React.FC = () => {\n    const { wheels, startSpinningHandler, stopSpinningHandler } = useSlotMachine();\n\n    return (\n        <div className={styleClasses['slot-machine']}>\n            <header className={styleClasses['slot-machine__header']}>\n                <h1 className={styleClasses['slot-machine__title']}>Slot Machine</h1>\n            </header>\n\n            <div className={styleClasses['slot-machine__wheels-wrapper']}>\n                {wheels.indexes &&\n                    wheels.indexes.length &&\n                    wheels.indexes.map((randomIndex, currIndex) => <Wheel key={currIndex} randomIndex={randomIndex} />)}\n            </div>\n\n            <div className={styleClasses['slot-machine__btns-wrapper']}>\n                <Button title='Start Spinning' disabled={wheels.status === 'spinning'} onClick={startSpinningHandler} />\n                <Button\n                    title='Stop It'\n                    disabled={wheels.status !== 'spinning'}\n                    severity='none'\n                    onClick={stopSpinningHandler}\n                />\n            </div>\n\n            {wheels.status === 'spun' && (\n                <div className={styleClasses['slot-machine__message-wrapper']}>\n                    <Message score={wheels.score} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SlotMachine;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport SlotMachine from './SlotMachine';\nimport './lib/styles/main.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <main className='container'>\n            <SlotMachine />\n        </main>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wheel\":\"Wheel_wheel__1TU0J\",\"active\":\"Wheel_active__32_4z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3hu2a\",\"button--primary\":\"Button_button--primary__2qaY2\",\"button--none\":\"Button_button--none__2srie\"};"],"sourceRoot":""}